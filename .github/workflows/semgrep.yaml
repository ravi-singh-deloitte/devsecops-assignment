name: Semgrep Security Scan

on:
  push:
    branches: [ques5]
  pull_request:

jobs:
  semgrep-scan:
    name: Run Semgrep Scan
    runs-on: ubuntu-latest
    outputs:
      critical_count: ${{ steps.classify.outputs.critical }}
      high_count: ${{ steps.classify.outputs.high }}
      medium_count: ${{ steps.classify.outputs.medium }}
      low_count: ${{ steps.classify.outputs.low }}
      critical_found: ${{ steps.classify.outputs.critical != '0' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install semgrep jq

      - name: Run Semgrep Scan
        run: semgrep --config .semgrep --json > semgrep-results.json

      - name: Classify Vulnerabilities by Severity
        id: classify
        run: |
          CRITICAL=$(jq '[.results[] | select(.extra.message | test("(?i)sql injection|remote code|deserialization|command injection"))]' semgrep-results.json)
          HIGH=$(jq '[.results[] | select(.extra.message | test("(?i)hardcoded|eval|insecure http"))]' semgrep-results.json)
          MEDIUM=$(jq '[.results[] | select(.extra.message | test("(?i)weak hash|no input validation"))]' semgrep-results.json)
          LOW=$(jq '[.results[] | select(.extra.message | test("(?i)logging sensitive|unused variable|code smell"))]' semgrep-results.json)

          echo "critical=$(echo $CRITICAL | jq 'length')" >> $GITHUB_OUTPUT
          echo "high=$(echo $HIGH | jq 'length')" >> $GITHUB_OUTPUT
          echo "medium=$(echo $MEDIUM | jq 'length')" >> $GITHUB_OUTPUT
          echo "low=$(echo $LOW | jq 'length')" >> $GITHUB_OUTPUT

      - name: Set Fail Flag for Critical Vulnerabilities
        if: steps.classify.outputs.critical != '0'
        run: echo "Critical vulnerabilities found!"
        continue-on-error: true

  create-issue:
    name: Create GitHub Issue if Vulnerabilities Found
    needs: semgrep-scan
    runs-on: ubuntu-latest
    if: always() && (
      needs.semgrep-scan.outputs.critical_count != '0' ||
      needs.semgrep-scan.outputs.high_count != '0' ||
      needs.semgrep-scan.outputs.medium_count != '0')

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          pip install semgrep jq

      - name: Run Semgrep Again
        run: semgrep --config .semgrep --json > semgrep-results.json

      - name: Create GitHub Issue
        run: |
          echo "## Semgrep Vulnerability Report" > issue.md

          jq -r '.results[] | select(.extra.message | test("(?i)sql injection|remote code|deserialization|command injection")) | "**[CRITICAL]** " + .path + ": " + .extra.message' semgrep-results.json >> issue.md
          jq -r '.results[] | select(.extra.message | test("(?i)hardcoded|eval|insecure http")) | "**[HIGH]** " + .path + ": " + .extra.message' semgrep-results.json >> issue.md
          jq -r '.results[] | select(.extra.message | test("(?i)weak hash|no input validation")) | "**[MEDIUM]** " + .path + ": " + .extra.message' semgrep-results.json >> issue.md

          gh issue create --title "Semgrep Security Alert - $(date +%Y-%m-%d)" \
            --body-file issue.md \
            --label "security,severity/critical,severity/high,severity/medium"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}