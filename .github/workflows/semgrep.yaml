name: Semgrep Security Scan

on:
  push:
    branches: [ques5]
  pull_request:

jobs:
  semgrep-scan:
    name: Run Semgrep Scan
    runs-on: ubuntu-latest
    outputs:
      critical_found: ${{ steps.classify.outputs.critical_found }}
      high_found: ${{ steps.classify.outputs.high_found }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - run: pip install -r requirements.txt && pip install semgrep jq

      - run: semgrep --config .semgrep --json > semgrep-results.json

      - id: classify
        run: |
          CRITICAL=$(jq '[.results[] | select(.extra.message | test("(?i)sql injection|remote code|deserialization"))]' semgrep-results.json)
          HIGH=$(jq '[.results[] | select(.extra.message | test("(?i)hardcoded|insecure|eval"))]' semgrep-results.json)

          echo "critical_found=$(echo $CRITICAL | jq 'length')" >> $GITHUB_OUTPUT
          echo "high_found=$(echo $HIGH | jq 'length')" >> $GITHUB_OUTPUT

      - name: Fail on Critical Issues
        if: steps.classify.outputs.critical_found != '0'
        run: |
          echo "Critical vulnerabilities found!"
          exit 1

  create-issue:
    name: Create GitHub Issue for Security Alerts
    needs: semgrep-scan
    runs-on: ubuntu-latest
    if: ${{ needs.semgrep-scan.outputs.critical_found != '0' || needs.semgrep-scan.outputs.high_found != '0' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - run: pip install jq gh

      - run: semgrep --config .semgrep --json > semgrep-results.json

      - name: Ensure labels exist
        run: |
          for label in security severity/critical severity/high; do
            gh label list | grep -q "^$label" || gh label create "$label" --description "Created by pipeline" --color FF0000
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Issue
        run: |
          echo "## Semgrep Alerts" > issue.md
          jq -r '.results[] | select(.extra.message | test("(?i)sql injection|remote code|deserialization|hardcoded|insecure")) | .path + ": " + .extra.message' semgrep-results.json >> issue.md

          gh issue create --title "Semgrep Security Alert - $(date +%Y-%m-%d)" --body-file issue.md --label "security, severity/critical"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}