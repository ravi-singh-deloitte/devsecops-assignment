name: Semgrep Security Scan

on:
  push:
    branches: [ques5]
  pull_request:

jobs:
  semgrep:
    name: Run Semgrep Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install semgrep jq

      - name: Run Semgrep Scan
        run: semgrep --config .semgrep --json > semgrep-results.json

      - name: Parse Semgrep Results and Classify
        id: classify
        run: |
          echo "::group::Parsing Semgrep Results"
          CRITICAL=$(jq '[.results[] | select(.extra.message | test("(?i)sql injection|remote code|os command|deserialization"))]' semgrep-results.json)
          HIGH=$(jq '[.results[] | select(.extra.message | test("(?i)hardcoded|eval|exec|insecure"))]' semgrep-results.json)
          MEDIUM=$(jq '[.results[] | select(.extra.severity=="WARNING") | select(.extra.message | test("(?i)logging|info leak|exposure"))]' semgrep-results.json)
          LOW=$(jq '[.results[] | select(.extra.severity=="INFO")]' semgrep-results.json)

          echo "CRITICAL_FOUND=$(echo $CRITICAL | jq 'length')" >> $GITHUB_ENV
          echo "HIGH_FOUND=$(echo $HIGH | jq 'length')" >> $GITHUB_ENV
          echo "MEDIUM_FOUND=$(echo $MEDIUM | jq 'length')" >> $GITHUB_ENV
          echo "LOW_FOUND=$(echo $LOW | jq 'length')" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: Fail if Critical Issues Found
        if: env.CRITICAL_FOUND != '0'
        run: |
          echo "Critical vulnerabilities found!"
          exit 1

      - name: Ensure Required Labels Exist
        run: |
          for label in security severity/critical severity/high severity/medium severity/low; do
            gh label list | grep -q "^$label" || gh label create "$label" --description "Created by pipeline" --color FF0000
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Issue for High/Critical Findings
        if: env.CRITICAL_FOUND != '0' || env.HIGH_FOUND != '0'
        run: |
          echo "## Semgrep Findings" > issue.md
          jq -r '.results[] | select(.extra.message | test("(?i)sql injection|remote code|os command|deserialization|hardcoded|eval|exec|insecure")) | .path + ": " + .extra.message' semgrep-results.json >> issue.md

          gh issue create \
            --title "Semgrep Security Alert - $(date +%Y-%m-%d)" \
            --body-file issue.md \
            --label "security, severity/critical"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}